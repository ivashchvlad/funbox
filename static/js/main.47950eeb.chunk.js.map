{"version":3,"sources":["Cat1.png","FoodCard.js","mock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FoodCard","taste","portion","weight","soldout","gift","caption","customer","useState","showBorder","setShowBorder","selected","setSelected","className","onMouseEnter","onMouseLeave","onClick","style","display","src","cat","alt","href","Food","id","caprion","App","food","setFood","useEffect","_food","map","item","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,gNCI5B,SAASC,EAAT,GAAkF,IAA9DC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,OAASC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAAY,EACxDC,oBAAS,GAD+C,mBACrFC,EADqF,KACzEC,EADyE,OAE5DF,oBAAS,GAFmD,mBAErFG,EAFqF,KAE3EC,EAF2E,KAgB5F,OACI,yBAAKC,UAAU,YACX,yBACIA,UAAS,mBAAeF,EAAY,WAAa,GAAxC,YAA+CP,EAAW,UAAY,IAC/EU,aAhBa,WACrBJ,GAAc,IAgBNK,aAba,WACrBL,GAAc,IAaNM,QAVQ,WAChBJ,GAAY,SAACD,GAAD,OAAeA,OAWnB,yBAAKE,UAAU,aAAaI,MAAO,CAAEC,QAAST,EAAa,QAAU,UACrE,yBAAKI,UAAU,gBACX,2BAAIV,GACJ,+CAEJ,yBAAKU,UAAU,aACX,yBAAKM,IAAKC,IAAKC,IAAI,SAEvB,yBAAKR,UAAU,qBACX,kLACA,0EACA,4BAAKZ,GACL,4BACI,2BAAIC,GADR,wCAEI,2BAAIG,EAAJ,sDACCE,GAAY,6HAIzB,0BAAMM,UAAU,WACVT,EAAD,4DAAyBH,EAAzB,kEACIU,EAAYL,EACT,oCACI,gKACA,uBAAGgB,KAAK,KAAR,gCCpD5B,IA6BeC,EA7BF,CACT,CACIC,GAAI,WACJvB,MAAO,+CACPE,OAAQ,MACRC,SAAS,EACTF,QAAS,GACTG,KAAM,2BACNC,QAAS,6LACV,CACCkB,GAAI,YACJvB,MAAO,wCACPE,OAAQ,IACRC,SAAS,EACTF,QAAS,GACTG,KAAM,6BACNC,QAAS,+OACV,CACCkB,GAAI,WACJvB,MAAO,wCACPE,OAAQ,IACRC,SAAS,EACTF,QAAS,IACTG,KAAM,mCACNoB,QAAS,8LACTlB,UAAU,ICaHmB,MAhCf,WAAgB,IAAD,EACWlB,mBAAS,IADpB,mBACNmB,EADM,KACAC,EADA,KAKb,OAHAC,qBAAU,WACRD,EAAQE,KACP,IAED,yBAAKjB,UAAU,OACb,8BACE,yBAAKA,UAAU,SACb,mKAEF,yBAAKA,UAAU,QAEXc,EAAKI,KAAI,SAAAC,GAAI,OACX,kBAAC,EAAD,CACEC,IAAKD,EAAKR,GACVvB,MAAO+B,EAAK/B,MACZC,QAAS8B,EAAK9B,QACdC,OAAQ6B,EAAK7B,OACbC,QAAS4B,EAAK5B,QACdC,KAAM2B,EAAK3B,KACXC,QAAS0B,EAAK1B,QACdC,SAAUyB,EAAKzB,kBChBX2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47950eeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Cat1.bd4cc66f.png\";","import React, { useState } from 'react'\nimport cat from './Cat1.png'\nimport './FoodCard.scss'\n\nexport default function FoodCard({ taste, portion, weight,  soldout, gift, caption, customer }) {\n    const [showBorder, setShowBorder] = useState(false);\n    const [selected, setSelected] = useState(false);\n\n    const handleMouseEnter = () => {\n        setShowBorder(true);\n    }\n\n    const handleMouseLeave = () => {\n        setShowBorder(false);\n    }\n\n    const handleClick = () => {\n        setSelected((selected) => !selected);\n    }\n\n    return (\n        <div className=\"fooditem\">\n            <div\n                className={`foodcard ${(selected) ? \"selected\" : \"\"} ${(soldout) ? \"disable\" : \"\"}`}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            >\n                <div className=\"food__back\" style={{ display: showBorder ? 'block' : 'none' }}></div>\n                <div className=\"food__weigth\">\n                    <p>{weight}</p>\n                    <span>КГ</span>\n                </div>\n                <div className=\"food__cat\">\n                    <img src={cat} alt=\"cat\" />\n                </div>\n                <div className=\"food__description\">\n                    <h4>Сказачное заморское явство</h4>\n                    <h2>Нямушка</h2>\n                    <h3>{taste}</h3>\n                    <h5>\n                        <b>{portion}</b> порций\n                        <p>{gift} в подарок</p>\n                        {customer && <p>заказчик доволен</p>}\n                    </h5>\n                </div>\n            </div>\n            <span className=\"caption\">\n                {(soldout) ? `Печалька, ${taste} закончился.` :\n                    (selected) ? caption : (\n                        <>\n                            <>Че сидишь? Порадуй коте, </>\n                            <a href=\"/\">купи.</a>\n                        </>\n                    )\n                }\n            </span>\n        </div>\n    )\n}\n","const Food = [\n    {\n        id: \"32ef24gf\",\n        taste: \"с фуа-гра\",\n        weight: \"0,5\",\n        soldout: false,\n        portion: 10,\n        gift: \"мышь\",\n        caption: \"Печень утки разварная с артишоками.\"\n    }, {\n        id: \"sdf43fc3v\",\n        taste: \"с рыбой\",\n        weight: \"2\",\n        soldout: false,\n        portion: 40,\n        gift: \"2 мыши\",\n        caption: \"Головы щучьи с чесноком да свежайшая сёмушка.\"\n    }, {\n        id: \"3rfeaefr\",\n        taste: \"с курой\",\n        weight: \"5\",\n        soldout: true,\n        portion: 100,\n        gift: \"5 мышей\",\n        caprion: \"Филе из цыплят с трюфелями в бульоне.\",\n        customer: true\n    }\n];\n\nexport default Food;","import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport FoodCard from './FoodCard';\nimport _food from './mock';\n\nfunction App() {\n  const [food, setFood] = useState([]);\n  useEffect(() => {\n    setFood(_food);\n  }, [])\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"title\">\n          <h1>Ты сегодня покормил кота?</h1>\n        </div>\n        <div className=\"food\">\n          { \n            food.map(item => (\n              <FoodCard \n                key={item.id}\n                taste={item.taste} \n                portion={item.portion} \n                weight={item.weight}\n                soldout={item.soldout} \n                gift={item.gift}\n                caption={item.caption}\n                customer={item.customer}\n              />\n            )) \n          }\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}